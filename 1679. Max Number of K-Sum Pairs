class Solution 
{
    public int maxOperations(int[] nums, int k) 
    {
        int numsArrayLength = nums.length;
        System.out.println(numsArrayLength);
        int maxKSumPairOperations = 0;
        int[] hashTable = new int[k];
        for (int i = 0; i < numsArrayLength; i++)
        {
            if (nums[i] < k) //So if the array has any value higher than k, that's automatically rejected
            {
                hashTable[nums[i]]++;
            }
        }
        // for (int i = 0; i < hashTable.length; i++)
        // {
        //     System.out.println("[" + i + "] = " + hashTable[i]);
        // }
        // System.out.println();
        for (int i = 1; i < (k/2 + 1); i++)
        {
            if (i == (k - i))
            {
                maxKSumPairOperations = maxKSumPairOperations + (hashTable[i] / 2);
            }
            else
            {
                if (hashTable[i] > hashTable[k - i])
                {
                    maxKSumPairOperations = maxKSumPairOperations + hashTable[k - i];
                }
                else //if (hashTable[i] <= hashTable[k - i])
                {
                    maxKSumPairOperations = maxKSumPairOperations + hashTable[i];
                }
            }
        }
        return maxKSumPairOperations;
    }
}
