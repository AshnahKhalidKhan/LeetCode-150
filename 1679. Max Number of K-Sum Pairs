import java.util.HashMap;
import java.util.Map;

class Solution 
{
    public int maxOperations(int[] nums, int k) 
    {
        // THIS SOLUTION WORKS BUT JAVA INSISTS I USE A HASHMAP INSTEAD OF A CUSTOM ONE:
        // int numsArrayLength = nums.length;
        // int maxKSumPairOperations = 0;
        // int[] hashTable = new int[k];
        // for (int i = 0; i < numsArrayLength; i++)
        // {
        //     if (nums[i] < k) //So if the array has any value higher than k, that's automatically rejected
        //     {
        //         hashTable[nums[i]]++;
        //     }
        // }
        // // for (int i = 0; i < hashTable.length; i++)
        // // {
        // //     System.out.println("[" + i + "] = " + hashTable[i]);
        // // }
        // // System.out.println();
        // for (int i = 1; i < (k/2 + 1); i++)
        // {
        //     if (i == (k - i))
        //     {
        //         maxKSumPairOperations = maxKSumPairOperations + (hashTable[i] / 2);
        //     }
        //     else
        //     {
        //         if (hashTable[i] > hashTable[k - i])
        //         {
        //             maxKSumPairOperations = maxKSumPairOperations + hashTable[k - i];
        //         }
        //         else //if (hashTable[i] <= hashTable[k - i])
        //         {
        //             maxKSumPairOperations = maxKSumPairOperations + hashTable[i];
        //         }
        //     }
        // }
        // return maxKSumPairOperations;

        int maxKSumPairOperations = 0;
        int numsArrayLength = nums.length;
        Map<Integer, Integer> hashMap = new HashMap<>();
        int numberofI = 0;
        int numberofKMinusI = 0;
        for (int i = 0; i < numsArrayLength; i++)
        {
            if (nums[i] < k) //So if the array has any value higher than k, that's automatically rejected
            {
                // if (hashMap.containsKey(nums[i]))
                // {
                //     hashMap.put(nums[i], hashMap.get(nums[i]) + 1);
                // }
                // else
                // {
                //     hashMap.put(nums[i], 1);
                // }
                hashMap.put(nums[i], hashMap.getOrDefault(nums[i], 0) + 1);
            }
        }
        // for (int i = 1; i < (k/2 + 1); i++)
        // {
        //     if (hashMap.containsKey(i))
        //     {
        //         numberofI = hashMap.get(i);
        //         if (i == (k - i)) // && hashMap.containsKey(i))
        //         {
        //             maxKSumPairOperations = maxKSumPairOperations + (numberofI / 2);
        //             hashMap.put(i, 0);
        //         }
        //         else if (hashMap.containsKey(k - i)) // && hashMap.containsKey(i)
        //         {
        //             numberofKMinusI = hashMap.get(k - i);
        //             if (numberofI > numberofKMinusI)
        //             {
        //                 maxKSumPairOperations = maxKSumPairOperations + numberofKMinusI;
        //             }
        //             else //if (numberofI <= numberofKMinusI)
        //             {
        //                 maxKSumPairOperations = maxKSumPairOperations + numberofI;
        //             }
        //             hashMap.put(i, 0);
        //             hashMap.put(k - i, 0);
        //         }

        //     }
        // }
        for (int i : hashMap.keySet()) 
        {
            numberofI = hashMap.get(i);
            if (i == k - i) 
            {
                maxKSumPairOperations = maxKSumPairOperations + (numberofI / 2);
            }
            else if (hashMap.containsKey(k - i))
            {
                numberofKMinusI = hashMap.get(k - i);
                if (numberofI > numberofKMinusI)
                {
                    maxKSumPairOperations = maxKSumPairOperations + numberofKMinusI;
                }
                else //if (numberofI <= numberofKMinusI)
                {
                    maxKSumPairOperations = maxKSumPairOperations + numberofI;
                }
                hashMap.put(k - i, 0);
            }
            hashMap.put(i, 0);
        }
        return maxKSumPairOperations;
    }
}
