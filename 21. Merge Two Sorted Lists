/**
 * Definition for singly-linked list.
 * public class ListNode
 * {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) 
    {
        if (list1 == null)
        {
            return list2;
        }
        else if (list2 == null)
        {
            return list1;
        }
        else
        {
            ListNode traversalNode = null;
            ListNode mainListHeadNode = null;
            ListNode otherListHeadNode = null;
            if (list1.val < list2.val)
            {
                mainListHeadNode = list1;
                traversalNode = list1;
                otherListHeadNode = list2;
            }
            else //if (list1.val >= list2.val)
            {
                mainListHeadNode = list2;
                traversalNode = list2;
                otherListHeadNode = list1;
            }
            ListNode exchangeNode = null;
            while (traversalNode != null && otherListHeadNode != null)
            {
                if ((otherListHeadNode.val >= traversalNode.val && traversalNode.next == null) || (otherListHeadNode.val >= traversalNode.val && traversalNode.next != null && otherListHeadNode.val < traversalNode.next.val))
                {
                    exchangeNode = traversalNode.next;
                    traversalNode.next = otherListHeadNode;
                    otherListHeadNode = otherListHeadNode.next;
                    traversalNode.next.next = exchangeNode;
                }
                traversalNode = traversalNode.next;
            }
            return mainListHeadNode;
        }
        // else if (list1.val < list2.val)
        // {
        //     ListNode traversalNode = list1;
        //     ListNode exchangeNode = null;
        //     while (traversalNode != null && list2 != null)
        //     {
        //         if ((list2.val >= traversalNode.val && traversalNode.next == null) || (list2.val >= traversalNode.val && traversalNode.next != null && list2.val < traversalNode.next.val))
        //         {
        //             exchangeNode = traversalNode.next;
        //             traversalNode.next = list2;
        //             list2 = list2.next;
        //             traversalNode.next.next = exchangeNode;
        //         }
        //         traversalNode = traversalNode.next;
        //     }
        //     return list1;
        // }
        // else //if (list1.head.val >= list2.head.val)
        // {
        //     ListNode traversalNode = list2;
        //     ListNode exchangeNode = null;
        //     while (traversalNode != null && list1 != null)
        //     {
        //         if ((list1.val >= traversalNode.val && traversalNode.next == null) || (list1.val >= traversalNode.val && traversalNode.next != null && list1.val < traversalNode.next.val))
        //         {
        //             exchangeNode = traversalNode.next;
        //             traversalNode.next = list1;
        //             list1 = list1.next;
        //             traversalNode.next.next = exchangeNode;
        //         }
        //         traversalNode = traversalNode.next;
        //     }
        //     return list2;
        // }
    }
}
