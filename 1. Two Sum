class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {
        int minNumber = 1000000001;
        int maxNumber = -1000000001;
        for (int i = 0; i < nums.length; i++)
        {
            if (nums[i] < minNumber)
            {
                minNumber = nums[i];
            }
            if (nums[i] > maxNumber)
            {
                maxNumber = nums[i];
            }
        }
        System.out.println("minNumber: " + minNumber);
        System.out.println("maxNumber: " + maxNumber);
        int[] psuedoHashTable;
        if (minNumber < 0)
        {
            psuedoHashTable = new int[-(minNumber) + maxNumber + 1];
        }
        else
        {
            psuedoHashTable = new int[maxNumber + 1];
        }
        for (int i = 0; i < psuedoHashTable.length; i++)
        {
            psuedoHashTable[i] = -1;
        }
        if (minNumber < 0)
        {
            for (int i = 0; i < nums.length; i++)
            {
                psuedoHashTable[nums[i] + (-(minNumber))] = i;
            }
        }
        else
        {
            for (int i = 0; i < nums.length; i++)
            {
                psuedoHashTable[nums[i]] = i;
            }
        }
        int[] answer = {0, 0};
        if (minNumber < 0)
        {
            for (int i = 0; i < nums.length; i++)
            {
                int checkIndex = target - nums[i] + (-(minNumber));
                if (checkIndex > -1 && checkIndex < psuedoHashTable.length && psuedoHashTable[checkIndex] != -1 && i != psuedoHashTable[checkIndex])
                {
                    answer[0] = i;
                    answer[1] = psuedoHashTable[checkIndex];
                    break;
                }
            }
        }
        else
        {
            for (int i = 0; i < nums.length; i++)
            {
                int checkIndex = target - nums[i];
                if (checkIndex > -1 && checkIndex < psuedoHashTable.length && psuedoHashTable[checkIndex] != -1 && i != psuedoHashTable[checkIndex])
                {
                    answer[0] = i;
                    answer[1] = psuedoHashTable[checkIndex];
                    break;
                }
            }
        }
        return answer;
    }
}
