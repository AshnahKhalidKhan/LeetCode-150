class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {
        int maxNumber = -1000000001;
        int minNumber = 1000000001;
        for (int i = 0; i < nums.length; i++)
        {
            if (nums[i] > maxNumber)
            {
                maxNumber = nums[i];
            }
            if (nums[i] < minNumber)
            {
                minNumber = nums[i];
            }
        }
        // System.out.println("maxNumber: " + maxNumber);
        // int[] psuedoHashTable = new int[maxNumber + 1];
        // for (int i = 0; i < psuedoHashTable.length; i++)
        // {
        //     psuedoHashTable[i] = -1;
        // }
        // for (int i = 0; i < psuedoHashTable.length; i++)
        // {
        //     System.out.print(psuedoHashTable[i] + " ");
        // }
        // System.out.println();
        // for (int i = 0; i < nums.length; i++)
        // {
        //     psuedoHashTable[nums[i]] = i;
        // }
        // System.out.println();
        // for (int i = 0; i < psuedoHashTable.length; i++)
        // {
        //     System.out.print(psuedoHashTable[i] + " ");
        // }
        // int[] answer = {0, 0};
        // for (int i = 0; i < nums.length; i++)
        // {
        //     int checkIndex = Math.abs(target - nums[i]);
        //     if (checkIndex > -1 && psuedoHashTable[checkIndex] != -1 && i != psuedoHashTable[checkIndex])
        //     {
        //         answer[0] = i;
        //         answer[1] = psuedoHashTable[checkIndex];
        //         break;
        //     }
        // }
        // return answer;
        int[] differences = new int[nums.length];
        for (int i = 0; i < nums.length; i++)
        {
            differences[i] = target - nums[i];
            //nums = [-3,4,3,90]
            //target = 0
            //maxNumber = 90
            //minNumber = -3
            //Wnat to declare an array of size -3, -2, ..., 90
            //This size is (|-3| + 1) + (90 + 1) = 95
            //When storing numbers,
            // If number n is positive then store index of n on (i + min)th array cell
            // If number n is negative then store index of n on |i|th array cell
            //So array indexes, and array values become:
            //nums: [-3, 4, 3, -90]
            //indexes: [0, 1, 2, 3]
            //hashTable indexes: [3, 7, 6, 93]
            //On each we'll check:
            // 0 - (-3) = 3
            //3 + |minNumber| = 3 + 3 = 6
            //Value at 6 exists?
            //Answer[0] = index current
            //Answer[1] = hashTableindex[target - nums[index current] + |minNumber|]
        }
        return nums;
    }
}
