class Solution 
{
    public int[] countBits(int n) 
    {
        /*
            To figure out a pattern, I'm going to try the number 10 and then the number 11
            and I have a feeling I should backwards for some reason:
            11 - 1011 - 3
            10 - 1010 - 2
            9 - 1001 - 2
            8 - 1000 - 1
            7 - 0111 - 3
            6 - 0110 - 2
            5 - 101 - 2
            4 - 100 - 1
            3 - 11 - 2
            2 - 10 - 1
            1 - 1 - 1
            0 - 0 - 0

            Okay, some observations:
            The zero or first index will always have the value 0.
            There isn't exactly a number pattern in the zeroes.
            I think there may be something to do with division or even/odd numbers maybe...?
            An odd number will always have a one at the end.
        */
        int[] ans = new int[n + 1];
        for (int i = 0; i < n; i++)
        {
            //Convert i into a binary number b_i
            //Count number of 1's in b_i
            //Store number of 1's in b_i into ans_i
            //Do not use a built-in function for converting to binary
            //Do it in O(n) linear time in a single pass
            ans[i] = i;
        }
        return ans;
    }
}
