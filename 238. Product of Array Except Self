class Solution 
{
    public int[] productExceptSelf(int[] nums) 
    {
        /*
        NOTE-TO-SELF:
        What answer should look like:
        0 - nums[1] * nums[2] * nums[3]
        1 - nums[0] * nums[2] * nums[3]
        2 - nums[0] * nums[1] * nums[3]
        3 - nums[0] * nums[1] * nums[2]

        Prefix product array looks like this:
        0 - 1
        1 - nums[0]
        2 - nums[0] * nums[1]
        3 - nums[0] * nums[1] * nums[2]

        Suffix product array looks like this:
        0 - nums[1] * nums[2] * nums[3]
        1 - nums[2] * nums[3]
        2 - nums[3]
        3 - 1
        */
        int arrayLength = nums.length;
        int[] answer = new int[arrayLength];
        int suffixProduct = 1;

        for(int i = 0; i < arrayLength; i++)
        {
            answer[i] = 1;
        }

        for(int i = 1; i < arrayLength; i++)
        {
            answer[i] = answer[i] * answer[i - 1] * nums[i - 1];
            // answer[arrayLength - 1 - i] = answer[arrayLength - 1 - i] * answer[arrayLength - i] * nums[arrayLength - i];
        }

        for(int i = 0; i < arrayLength; i++)
        {
            System.out.print(answer[i] + ", ");
        }

        for(int i = 1; i < arrayLength; i++)
        {
            // answer[i] = answer[i] * answer[i - 1] * nums[i - 1];
            // System.out.println((arrayLength - 1 - i)+ "=" + answer[arrayLength - 1 - i] + "*" + answer[arrayLength - i] + "*" + nums[arrayLength - i]);
            suffixProduct = suffixProduct * nums[arrayLength - i];
            answer[arrayLength - 1 - i] = answer[arrayLength - 1 - i] * suffixProduct;
        }
        return answer;
    }
}
